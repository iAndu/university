#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct frnd {
    int money, factor;
};

vector<frnd> vec;
vector<long long> sum;

void read(int &n, int &dif) {
    frnd x;

    cin >> n >> dif;
    for (int i = 0; i < n; ++i) {
        cin >> x.money >> x.factor;
        vec.push_back(x);
    }
}

bool rule(frnd x, frnd y) {
    return (x.money < y.money);
}

int bin_search(int st, int dr, int val) {
    int mij, aux = dr;

    while (st <= dr) {
        mij = st + ((dr - st) >> 1);
        if (vec[mij].money == val) {
            return sum[mij];
        } else if(vec[mij].money < val) {
            st = mij + 1;
        } else dr = mij - 1;
    }
    if(sum[aux] - sum[dr] <= val)
        return 0;
    return sum[dr];
}

int main() {
    int n, dif, st = 0, poz = 0;
    long long maxx;

    read(n, dif);
    sort(vec.begin(), vec.end(), rule);

    sum.push_back(vec[0].factor);
    maxx = sum[0];
    for (int i = 1; i < n; ++i) {
        poz = bin_search(st, i, vec[i].money - dif);
        sum.push_back(sum[i - 1] - poz + vec[i].factor);
        if (sum[i] > maxx) {
            maxx = sum[i];
        }
    }
    cout << maxx;

    //FMM DE EVALUATOR TAMPIT
    return 0;
}
