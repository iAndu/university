#include <iostream>
#include <fstream>
#include <cstring>
#include <vector>
#include <unordered_map>
#include <unordered_set>
using namespace std;

struct expresion {
    int state, jump;
    char event;
};

int** create_automata(vector<expresion> vec, unordered_map<char, int> my_hash, int nr_states, int nr_events) {
    int** formula = new int*[nr_states];
    for (int i = 0; i < nr_states; ++i) {
        formula[i] = new int[nr_events];
        for (int j = 0; j < nr_events; ++j) {
            formula[i][j] = -1;
        }
    }

    vector<expresion>::iterator it;
    for (it = vec.begin(); it != vec.end(); ++it) {
        formula[it->state][my_hash[it->event]] = it->jump;
    }

    return formula;
}

bool check_word(int **formula, unordered_set<int>accepted_states, unordered_map<char, int> my_hash, string word) {
    int state = 0;

    for (unsigned int i = 0; i < word.length(); ++i) {
        state = formula[state][my_hash[word[i]]];
        if (state == -1) {
            return false;
        }
    }

    if (accepted_states.find(state) != accepted_states.end()) {
        return true;
    }
    return false;
}

int main() {
    int index = 0;
    expresion exp;
    unordered_map<char, int> my_hash;
    vector<expresion> vec;
    unordered_set<int> accepted_states;
    unordered_set<int> states;

    ifstream in("DFA.in");
    string line;
    getline(in, line);
    for (unsigned int i = 0; i < line.length(); ++i) {
        if (isdigit(line[i])) {
            accepted_states.insert(line[i] - '0');
        }
    }
    while (in >> exp.state >> exp.event >> exp.jump) {
        if (my_hash.find(exp.event) == my_hash.end()) {
            my_hash[exp.event] = index;
            ++index;
        }
        vec.push_back(exp);
        states.insert(exp.state);
        states.insert(exp.jump);
    }
    /*for (vector<expresion>::iterator it = vec.begin(); it != vec.end(); ++it) {
        cout << it->state << ' ' << it->event << ' ' << it->jump << '\n';
    }*/

    int nr_states = states.size();
    int nr_events = my_hash.size();

    int **formula = create_automata(vec, my_hash, nr_states, nr_events);
    unordered_map<char, int>::iterator it;
    /*for (int i = 0; i < nr_states; ++i) {
        for (int j = 0; j < nr_events; ++j) {
            cout << formula[i][j] << ' ';
        }
        cout << '\n';
    }*/
    cout << "Introduceti cuvantul: ";
    string word;
    cin >> word;
    if (check_word(formula, accepted_states, my_hash, word)) {
        cout << "Cuvantul este acceptat!\n";
    } else {
        cout << "Cuvantul nu este acceptat!\n";
    }

    return 0;
}
